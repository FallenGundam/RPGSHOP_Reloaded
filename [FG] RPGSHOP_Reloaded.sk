#script name: RPGSHOP_Reloaded  by Fallen_Gundam
#version: v1.1.0
#completion date: 2023/3/7
#         v1.0.1 2023/3/8
#		  v1.0.5 2023/3/14
#		  v1.0.6 2023/3/15
#		  v1.1.0 2023/3/23
#Discord: FallenGundam#8864

# required plugins:
	#Skript 2.3 ~ lastest
	#skript-reflect
	#skript-yaml
	#vault
	#PlayerPoints (選)
	#Citizens (選)

# Server Version : 1.13.2 ~ 1.19

options:

	system_prefix: &f[&5RPGSHOP&f]&f

	# 儲存路徑:
	# 可將資料夾儲存在伺服器資料夾以外的地方，這樣可使多個伺服器資料夾讀取同一個檔案
	# Example: ../Share_plugins/rpgshop 

	path: plugins\rpgshop

	#Player GUI
	GUI_Title: &0&lRPGSHOP
	price_aliases: &7-----購買需求----- &8(右鍵查看)
	money_aliases: &e金錢
	level_aliases: &a等級
	points_aliases: &9Points
	none_price: &a免費

	condition_true: &a✔
	condition_false: &c✘

	#Player message
	price_msg_item: &6消耗了
	price_msg_money: &6花費了&e [var] $
	price_msg_points: &6花費了&9 [var] Points
	price_msg_level: &6花費了&a [var] 等級

	reward_msg: &a成功購買了
	reward_sound: entity.experience_orb.pickup
	reward_sound_pitch: 0.5

	buy_deny_msg: &c購買條件不足
	buy_deny_sound: entity.blaze.death
	buy_deny_sound_pitch: 1.25

	GUI_Title2: &1商品需求物品展示
	GUI2_open_deny_msg: &c該商品沒有需求物品

#PlayerPoints API


import:
	java.util.UUID
	java.io.File

#> 查看玩家point
function PlayerPoints_look(p:player) :: number:
	set {_uuid} to UUID.fromString(uuid of {_p})
	return {PlayerPoints_class}.getInstance().getAPI().look({_uuid})

#> 給予玩家point
function PlayerPoints_give(p:player,i:integer):
	set {_uuid} to UUID.fromString(uuid of {_p})
	{PlayerPoints_class}.getInstance().getAPI().give({_uuid},{_i})

#> 設置玩家point
function PlayerPoints_set(p:player,i:integer):
	set {_uuid} to UUID.fromString(uuid of {_p})
	{PlayerPoints_class}.getInstance().getAPI().set({_uuid},{_i})
	
#> 消耗玩家point
function PlayerPoints_take(p:player,i:integer):
	set {_uuid} to UUID.fromString(uuid of {_p})
	{PlayerPoints_class}.getInstance().getAPI().take({_uuid},{_i})

#> 字串中提取數字
function StringGetNumber(t:text) :: number:
	set {_r} to {_t}.replaceAll("[^0-9.]+","")
	return {_r} parsed as number

#> 獲取資料夾內所有檔案名
function File_DirectoryList(file:text) :: Strings:
	set {_f} to new File({_file})
	if {_f}.exists():
		set {_list} to {_f}.listFiles()
		set {_list} to "%{_list}%"
		replace all "[" and "]" with "" in {_list}
		set {_list::*} to {_list} split at ", "
		return {_list::*}

function File_getname(file:string) :: string:
	set {_f} to new File({_file}).getName()
	return {_f}



on skript load:
	if plugin "PlayerPoints" is enabled:
		send "{@system_prefix} &a已偵測到插件 PlayerPoints " to console
		set {-PlayerPoints_class} to the class "org.black_ixx.playerpoints.PlayerPoints"
	if plugin "Citizens" is enabled:
		send "{@system_prefix} &a已偵測到插件 Citizens " to console
		set {-NPCAPI} to the class "net.citizensnpcs.api.CitizensAPI"

on skript unload:
	delete {-PlayerPoints_class} and {-NPCAPI}

# NPC Select
on rightclick:
	if target is a living entity:
		set {_e} to target entity
		if {-NPCAPI} is set:
			if {-NPCAPI}.getNPCRegistry().isNPC({_e}):
				set {_npc} to {-NPCAPI}.getNPCRegistry().getNPC({_e})
				if {-rs::selectnpc::%player%} is set:
					set yaml value "BindNPC" from {-rs::selectnpc::%player%} to {_npc}.getId()
					save yaml {-rs::selectnpc::%player%}
					delete {-rs::selectnpc::%player%}
					send "{@system_prefix} &a成功設定商店的NPC為 %{_npc}.getName()% &e(ID:%{_npc}.getId()%)" to player
					wait 0.5 seconds
					rs_editor_gui( player, 1 )
				else:
					set {_l::*} to {-rs::LoadedShop::*}
					loop {_l::*}:
						set {_npcid} to yaml value "BindNPC" from loop-value
						if {_npc}.getId() = {_npcid}:
							set {_shop_exists} to true
							set {_shop_code} to loop-value
							stop loop
					if player is sneaking:
						
						if player has permission "rs.admin":
							if {_shop_exists} = true:
								execute player command "rsa edit %{_shop_code}%"
							else:
								send "{@system_prefix} &c該NPC尚未綁定RPGSHOP" to player
					else:
						if {_shop_exists} = true:
							rs_openshop(player,{_shop_code}.replaceAll(".yaml",""))

# open shop
command rpgshop [<player>] [<text>]:
	permission: rsa.admin
	trigger:
		rs_openshop(arg-1,arg-2)

function rs_openshop(p:player,shopid:text):
	set {_arg} to {_shopid}
	set {_shopid} to "%{_shopid}%.yaml"
	set {_list::*} to {-rs::LoadedShop::*}
	if {_list::*} contains {_shopid}:
		set {_shopname} to yaml value "ShopName" from {_shopid}
		
		open chest inventory with 6 rows named "{@GUI_Title} %{_shopname}%" to {_p}
		set {_rsitems::*} to yaml nodes with key "items" from {_shopid}
		loop {_rsitems::*}:

			loop 36 times:
				set {_slot_id} to (loop-value-2)-1 
				set {_it} to slot {_slot_id} of {_p}'s inventory
				if {_it} isn't air:
					set {_inv::%{_slot_id}%} to {_it}

			set {_pricelore::*} to "&0&m-&0&m-&0&m-&0%{_arg}%" and "{@price_aliases}"
			set {_reward} to yaml value "items.%loop-value%.reward" from {_shopid}
			set {_price::level} to yaml value "items.%loop-value%.price.level" from {_shopid}
			if {_price::level} > 0:
				if {_p}'s level >= {_price::level}:
					set {_stats} to "{@condition_true}"
				else:
					set {_stats} to "{@condition_false}"
				add "{@level_aliases}&f x %{_price::level}% %{_stats}%" to {_pricelore::*}
			set {_price::money} to yaml value "items.%loop-value%.price.money" from {_shopid}
			if {_price::money} > 0:
				if {_p}'s money >= {_price::money}:
					set {_stats} to "{@condition_true}"
				else:
					set {_stats} to "{@condition_false}"
				add "{@money_aliases}&f x %{_price::money}%$ %{_stats}%" to {_pricelore::*}
			if {PlayerPoints_class} is set:
				set {_price::points} to yaml value "items.%loop-value%.price.points" from {_shopid}
				if {_price::points} > 0:
					if PlayerPoints_look({_p}) >= {_price::points}:
						set {_stats} to "{@condition_true}"
					else:
						set {_stats} to "{@condition_false}"
					add "{@points_aliases}&f x %{_price::points}% %{_stats}%" to {_pricelore::*}
			if yaml path "items.%loop-value%.price.itemlist" in {_shopid} has value:
				set {_price::itemlist::*} to yaml list "items.%loop-value%.price.itemlist" from {_shopid}
				loop {_price::itemlist::*}:
					clear {_stats}
					set {_itemtemp} to loop-value-2
					loop {_inv::*}:		
						set {_slotid} to loop-index-3
						set {_invitem} to loop-value-3
						if type of {_itemtemp} = type of {_invitem}:
							if name of {_itemtemp} is set:
								if uncolored name of {_itemtemp} != uncolored name of {_invitem}:
									continue
							if lore of {_itemtemp} is set:
								if "%uncolored lore of {_itemtemp}%" != "%uncolored lore of {_invitem}%":
									continue
							if item amount of {_invitem} >= item amount of {_itemtemp}:
								set {_stats} to "{@condition_true}&0%{_slotid}%"
								delete {_inv::%{_slotid}%}
								exit 1 loops
					if {_stats} isn't set:
						set {_stats} to "{@condition_false}"

					if name of {_itemtemp} is set:
						add "%name of {_itemtemp}% &fx&f %item amount of {_itemtemp}% %{_stats}%" to {_pricelore::*}
					else:
						add "%type of {_itemtemp}% &fx&f %item amount of {_itemtemp}% %{_stats}%" to {_pricelore::*}
			if size of {_pricelore::*} < 3:
				add "{@none_price}" to {_pricelore::*}
			set {_slot} to loop-value
			set {_slot} to {_slot} parsed as number
			set slot {_slot} of {_p}'s current inventory to {_reward} with lore lore of {_reward} and {_pricelore::*}
#> 清除緩存
on quit:
	if {-rs::invname::%player%} is set:
		delete {-rs::invtemp::%player%::*} and {-rs::invname::%player%}

on inventory close:
	set {_event_inv_name} to event.getView().getTitle()
	if {_event_inv_name} = "{@GUI_Title2}":
		wait 2 tick
		if {-rs::invname::%player%} is set:
			delete {-rs::invtemp::%player%::*} and {-rs::invname::%player%}

on inventory click:
	if name of event-inventory = "{@GUI_Title2}":
		cancel event
		if index of event-slot = 17:
			close player's inventory
			open chest inventory with 6 rows named {-rs::invname::%player%} to player
			loop {-rs::invtemp::%player%::*}:
				set {_slot} to loop-index parsed as number
				set slot {_slot} of player's current inventory to loop-value
			delete {-rs::invtemp::%player%::*} and {-rs::invname::%player%}
	else if name of event-inventory contains "{@GUI_Title}":
		cancel event
		if type of event-inventory is chest inventory:
			if event-slot isn't air:

				if click action is right mouse button:
					loop lore of event-slot:
						if loop-value contains "&0&m-&0&m-&0&m-":
							set {_code} to loop-value
							replace all "&0&m-&0&m-&0&m-&0" with "" in {_code}
							stop loop
					set {_it::*} to yaml list "items.%index of event-slot%.price.itemlist" from "%{_code}%.yaml"
					if size of {_it::*} > 0:
						loop 53 times:
							set {_slot} to (loop-value) -1
							set {-rs::invtemp::%player%::%{_slot}%} to slot {_slot} of event-inventory
						set {-rs::invname::%player%} to name of event-inventory
						close player's inventory
						open chest inventory with 2 rows named "{@GUI_Title2}" to player
						set {_slot} to 0
						loop {_it::*}:
							add 1 to {_slot}
							set slot {_slot}-1 of player's current inventory to loop-value
						set slot 17 of player's current inventory to barrier named "&c返回" with lore "&0%{_code}%"
					else:
						send "{@system_prefix} {@GUI2_open_deny_msg}" to player

				else if click action is left mouse button:
					if "%lore of event-slot%" doesn't contain "{@condition_false}":
						loop lore of event-slot:
							if loop-value contains "&0&m-&0&m-&0&m-":
								set {_code} to loop-value
								replace all "&0&m-&0&m-&0&m-&0" with "" in {_code}
								set {_found} to true
								continue
							if {_found} is true:
								if loop-value != "{@price_aliases}":
									add loop-value to {_price::*}
						clear {_found}
						

						loop {_price::*}:
							if loop-value contains "{@none_price}":
								stop loop
							else if loop-value contains "{@money_aliases}":
								set {_n} to StringGetNumber(loop-value)
								remove {_n} from player's money
								set {_msg} to "{@price_msg_money}"
								replace all "[var]" with "%{_n}%" in {_msg}
								send "{@system_prefix} %{_msg}%"
							else if loop-value contains "{@level_aliases}":
								set {_n} to StringGetNumber(loop-value)
								remove {_n} from player's level
								set {_msg} to "{@price_msg_level}"
								replace all "[var]" with "%{_n}%" in {_msg}
								send "{@system_prefix} %{_msg}%"
							else if loop-value contains "{@points_aliases}":
								set {_n} to StringGetNumber(loop-value)
								PlayerPoints_take(player,{_n})
								set {_msg} to "{@price_msg_points}"
								replace all "[var]" with "%{_n}%" in {_msg}
								send "{@system_prefix} %{_msg}%"
							else:
								set {_templist::*} to loop-value split at " &fx&f "
								replace all " " with "" in {_templist::2}
								set {_word} to uncolored "{@condition_true}"
								set {_templist2::*} to uncolored {_templist::2} split at {_word} 
								set {_itemamount} to {_templist2::1} parsed as number
								set {_itemslot} to {_templist2::2} parsed as number

								remove {_itemamount} from item amount of slot {_itemslot} of player's inventory
								send "{@system_prefix} {@price_msg_item} %{_templist::1}% &fx %{_itemamount}%"

						play sound "{@reward_sound}" with volume 1 with pitch {@reward_sound_pitch} to the player
			
						set {_givereward} to true
						if yaml path "items.%index of event-slot%.rewardcmd" in "%{_code}%.yaml" has value:
							set {_cmd::*} to yaml list "items.%index of event-slot%.rewardcmd" from "%{_code}%.yaml"
							loop {_cmd::*}:
								set {_v} to loop-value
								replace all "[p]" with name of player in {_v}
								execute console command {_v}
							set {_givereward} to yaml value "items.%index of event-slot%.keepreward" from "%{_code}%.yaml"

						if {_givereward} = true:
							set {_reward} to yaml value "items.%index of event-slot%.reward" from "%{_code}%.yaml" 
							if player has enough space for 1 of stone:
								give {_reward} to player
							else:
								drop {_reward} at location of player
								send "{@system_prefix} &c背包已滿，物品已掉落"

							if name of event-slot is set:
								send "{@system_prefix} {@reward_msg} %name of event-slot% x %item amount of event-slot%"
							else:
								send "{@system_prefix} {@reward_msg} %type of event-slot% x %item amount of event-slot%"

						loop {_price::*}:
							if loop-value contains "{@none_price}":
								stop trigger
							else if loop-value contains "{@level_aliases}" or "{@money_aliases}" or "{@points_aliases}":
								add loop-value to {_newprice::*}
							else:
								set {_test::*} to loop-value split at " &fx&f "
								if {_newprice::*} doesn't contain {_test::1}:
									add {_test::1} to {_newprice::*}
						if name of {_reward} is set:
							add name of {_reward} to {_newprice::*}
						else:
							add type of {_reward} to {_newprice::*}
						delete {_price::*} and {_reward} 
						# 更新商城物品
						loop 54 times:
							set {_slotindex} to loop-value -1
							set {_slotitem} to slot {_slotindex} of event-inventory
							if {_slotitem} isn't air:
								clear {_temp_lore::*}
								clear {_line}
								loop lore of {_slotitem}:
									add 1 to {_line}
									if loop-value-2 contains "{@price_aliases}":
										set {_found} to true
										continue
									if {_found} is true:
										set {_temp_lore::%{_line}%} to loop-value-2
								# 偵測交易後改動過的資料
								loop {_newprice::*}:
									if loop-value-2 contains "{@level_aliases}":
										set {_temp} to yaml value "items.%{_slotindex}%.price.level" from "%{_code}%.yaml"
										if {_temp} > 0:
											loop {_temp_lore::*}:
												if loop-value-3 contains "{@level_aliases}":
													set {_loreline} to loop-index-2 parsed as number
													if player's level >= {_temp}:
														set {_stats} to "{@condition_true}"
													else:
														set {_stats} to "{@condition_false}"
													set line {_loreline} of lore of slot {_slotindex} of event-inventory to "{@level_aliases}&f x %{_temp}% %{_stats}%"
													delete {_temp_lore::%loop-index-2%}
													exit 1 loops
									
									if loop-value-2 contains "{@money_aliases}":
										set {_temp} to yaml value "items.%{_slotindex}%.price.money" from "%{_code}%.yaml"
										if {_temp} > 0:
											loop {_temp_lore::*}:
												if loop-value-3 contains "{@money_aliases}":
													set {_loreline} to loop-index-2 parsed as number
													if player's money >= {_temp}:
														set {_stats} to "{@condition_true}"
													else:
														set {_stats} to "{@condition_false}"
													set line {_loreline} of lore of slot {_slotindex} of event-inventory to "{@money_aliases}&f x %{_temp}%$ %{_stats}%"
													delete {_temp_lore::%loop-index-2%}
													exit 1 loops

									if loop-value-2 contains "{@points_aliases}":
										set {_temp} to yaml value "items.%{_slotindex}%.price.points" from "%{_code}%.yaml"
										if {_temp} > 0:
											loop {_temp_lore::*}:
												if loop-value-3 contains "{@points_aliases}":
													set {_loreline} to loop-index-2 parsed as number
													if PlayerPoints_look( player ) >= {_temp}:
														set {_stats} to "{@condition_true}"
													else:
														set {_stats} to "{@condition_false}"
													set line {_loreline} of lore of slot {_slotindex} of event-inventory to "{@points_aliases}&f x %{_temp}% %{_stats}%"
													delete {_temp_lore::%loop-index-2%}
													exit 1 loops
									#> 偵測交易後改動過的物品
									else:
										loop {_temp_lore::*}:
											set {_itemname::*} to loop-value-3 split at " &fx&f "
											if {_itemname::1} = loop-value-2:
												set {_loreline} to loop-index-2 parsed as number
												set {_itemamount} to {_itemname::2}.substring(0,{_itemname::2}.indexOf("§")).trim()

												#> 從資料庫中提取需求物品
												if {_item_price::*} isn't set:
													set {_item_price::*} to yaml list "items.%{_slotindex}%.price.itemlist" from "%{_code}%.yaml"
												loop {_item_price::*}:
													set {_itemtemp} to loop-value-4
													if "%item amount of {_itemtemp}%" = "%{_itemamount}%": 
														if name of {_itemtemp} is set:
															if name of {_itemtemp} = {_itemname::1}:
																set {_price_item} to {_itemtemp}
																delete {_item_price::%loop-index-3%}
																exit 1 loops
														else:
															if "%type of {_itemtemp}%" = {_itemname::1}:
																set {_price_item} to {_itemtemp}
																delete {_item_price::%loop-index-3%}
																exit 1 loops
												#> 重新偵測背包物品
												if {_playersinv::*} isn't set:
													loop 36 times:
														set {_slottemp} to (loop-value-4)-1
														set {_playersinv::%{_slottemp}%} to slot {_slottemp} of player's inventory
												loop {_playersinv::*}:
													set {_invitem} to loop-value-4
													set {_slotid} to loop-index-3
													if type of {_price_item} = type of {_invitem}:
														if name of {_price_item} is set:
															if uncolored name of {_price_item} != uncolored name of {_invitem}:
																continue
														if lore of {_price_item} is set:
															if "%uncolored lore of {_price_item}%" != "%uncolored lore of {_invitem}%":
																continue
														if item amount of {_invitem} >= item amount of {_price_item}:
															set {_stats} to "{@condition_true}&0%{_slotid}%"
															delete {_playersinv::%{_slotid}%}
															exit 1 loops
												if {_stats} isn't set:
													set {_stats} to "{@condition_false}"
												if name of {_price_item} is set:
													set line {_loreline} of lore of slot {_slotindex} of event-inventory to "%name of {_price_item}% &fx&f %item amount of {_price_item}% %{_stats}%" 
												else:
													set line {_loreline} of lore of slot {_slotindex} of event-inventory to "%type of {_price_item}% &fx&f %item amount of {_price_item}% %{_stats}%" 
												clear {_stats}
										clear {_playersinv::*}
										clear {_item_price::*}

					else:
						send "{@system_prefix} {@buy_deny_msg}"
						play sound "{@buy_deny_sound}" with volume 1 with pitch {@buy_deny_sound_pitch} to the player

#editor

on load:
	loop rs_getAllshop():
		load yaml "{@path}/%loop-value%" as loop-value
		add loop-value to {-rs::LoadedShop::*}
on unload:
	loop rs_getAllshop():
		unload yaml loop-value
	delete {-rs::*}

function rs_getAllshop() :: texts:
	loop File_DirectoryList("{@path}"):
		if loop-value contains ".yml" or ".yaml":
			add File_getname(loop-value) to {_result::*}
	return {_result::*}

function rs_jsonraw(t:text,cmd:text,sgt:text) :: text:
	return "{""text"":""%{_t}%"",""hoverEvent"":{""action"":""show_text"",""value"":{""text"":""%{_cmd}%""}},""clickEvent"":{""action"": ""suggest_command"",""value"": ""%{_sgt}%""}}"

function yaml_list_add(ymltext:string,filename:string,value:object):
	if yaml path {_ymltext} in {_filename} has value:
		set {_list::*} to yaml list {_ymltext} from {_filename}
	add {_value} to {_list::*}
	set yaml list {_ymltext} from {_filename} to {_list::*}
	save yaml {_filename}
function yaml_list_remove(ymltext:string,filename:string,index:number):
	if yaml path {_ymltext} in {_filename} has value:
		set {_list::*} to yaml list {_ymltext} from {_filename}
		delete {_list::%{_index}%}
		if size of {_list::*} > 0:
			set yaml list {_ymltext} from {_filename} to {_list::*}
		else:
			delete yaml list {_ymltext} from {_filename}
		save yaml {_filename}



function rs_editor_gui(p:player,page:number):
	set {_allshop::*} to {-rs::LoadedShop::*}
	open chest inventory with 6 rows named "&1RPGSHOP_Editor &3&l第 %{_page}% 頁" to {_p}
	set {_slot} to 0
	if size of {_allshop::*} > 0:
		loop 45 times:
			set {_index} to {_page} * 45 - 45 + loop-value
			if yaml "%{_allshop::%{_index}%}%" is loaded:
				set {_name} to yaml value "ShopName" from {_allshop::%{_index}%}
				set {_npc} to yaml value "BindNPC" from {_allshop::%{_index}%}
				set slot {_slot} of {_p}'s current inventory to chest named "&f商店代號: %{_allshop::%{_index}%}%" with lore "&a顯示名稱: &f%{_name}%" , "&e綁定NPC(ID): &f%{_npc}%" , "" , "&7>> &9左鍵&7-&f進入編輯" , "&7>> &bshift+左鍵&7-&f設定NPC" , "&7>> &2右鍵&7-&f編輯商店名稱" and "&7>> &4shift+右鍵&7-&f刪除商店"
			clear {_name}
			add 1 to {_slot}
	if {_page} > 1:
		set slot 45 of {_p}'s current inventory to arrow named "&c上一頁" with lore "&0%{_page}-1%"
	set slot 53 of {_p}'s current inventory to arrow named "&c下一頁" with lore "&0%{_page}+1%"

function rs_edit_shop(p:player,shopname:text):
	set {-rs::editing::%{_p}%} to {_shopname}
	set {_name} to yaml value "ShopName" from {_shopname} 
	open chest inventory with 6 rows named "&1RPGSHOP_Editing: %{_name}%" to {_p}
	loop yaml nodes with key "items" from {_shopname}:
		set {_reward} to yaml value "items.%loop-value%.reward" from {_shopname}
		set {_slot} to loop-value
		set {_slot} to {_slot} parsed as integer
		set slot {_slot} of {_p}'s current inventory to {_reward} with lore lore of {_reward} and "" and "&b---點擊左鍵編輯需求---" and "&c---點擊右鍵刪除此物品---" and "&e---點擊滑鼠中鍵複製出物品---"


function rs_edit_item(p:player,slot:object):
	open chest inventory with 2 rows named "&1RPGSHOP_price: %{_slot}%" to {_p}
	set {_s} to 0
	set {_list::*} to yaml list "items.%{_slot}%.price.itemlist" from {-rs::editing::%{_p}%}
	loop {_list::*}:
		set {_item} to loop-value
		set slot {_s} of {_p}'s current inventory to loop-value with lore lore of loop-value and "&c---點擊右鍵刪除此物品---" and "&e---點擊滑鼠中鍵複製出物品---"
		add 1 to {_s}
	set {_lv} to yaml value "items.%{_slot}%.price.level" from {-rs::editing::%{_p}%}
	set {_money} to yaml value "items.%{_slot}%.price.money" from {-rs::editing::%{_p}%}
	set {_points} to yaml value "items.%{_slot}%.price.points" from {-rs::editing::%{_p}%}
	if yaml path "items.%{_slot}%.rewardcmd" in {-rs::editing::%{_p}%} has value:
		set {_keepreward} to yaml value "items.%{_slot}%.keepreward" from {-rs::editing::%{_p}%}
	else:
		set {_keepreward} to "&c你尚未設定指令獎勵"
	loop 3 times:
		set slot 8+loop-value of {_p}'s current inventory to black glass pane named "&0"
	set slot 12 of {_p}'s current inventory to paper named "&6編輯指令獎勵" with lore "&a點擊左鍵進入編輯" and "&b指令獎勵存在時，是否給予商品:&e %{_keepreward}% &7(右鍵切換狀態)"
	set slot 13 of {_p}'s current inventory to bottle o' enchanting named "&f編輯經驗等級需求" with lore "&f目前值: %{_lv}%" and "&a點擊左鍵可編輯"  and "&c點擊右鍵重置"
	set slot 14 of {_p}'s current inventory to gold ingot named "&e編輯金錢需求" with lore "&f目前值: %{_money}%" and "&a點擊左鍵可編輯"  and "&c點擊右鍵重置"
	if {PlayerPoints_class} is set:
		set slot 15 of {_p}'s current inventory to diamond named "&b編輯playerpoints需求" with lore "&f目前值: %{_points}%" and "&a點擊左鍵可編輯"  and "&c點擊右鍵重置"
	set slot 16 of {_p}'s current inventory to writable book named "&e點擊左鍵儲存所有物品" with lore "" and "&c點擊shift+右鍵 清空所有需求物品"
	set slot 17 of {_p}'s current inventory to barrier named "&c退出編輯"

function rs_edit_cmd(p:player,slot:object):
	open chest inventory with 1 rows named "command editor slot: %{_slot}%" to {_p}
	if yaml path "items.%{_slot}%.rewardcmd" in {-rs::editing::%{_p}%} has value:
		set {_list::*} to skript-yaml list "items.%{_slot}%.rewardcmd" from {-rs::editing::%{_p}%}
		set {_index} to 0
		loop {_list::*}:
			set slot {_index} of {_p}'s current inventory to paper named "%loop-value%" with lore "&c點擊右鍵刪除"  
			add 1 to {_index}
	set slot 8 of {_p}'s current inventory to redstone named "&c返回" 

on inventory click:
	if name of event-inventory contains "&1RPGSHOP_Editor":
		if type of event-inventory is chest inventory:
			cancel event
			if event-slot is chest:
				set {_name} to uncolored name of event-slot
				replace all "商店代號:" and " " with "" in {_name}
				if click action is left mouse button:
					close player's inventory
					rs_edit_shop(player,{_name})
				else if click action is left mouse button with shift:
					set {-rs::selectnpc::%player%} to {_name}
					close player's inventory
					send "{@system_prefix} &a請點擊NPC"
				else if click action is right mouse button with shift:
					delete yaml "%{_name}%"
					remove {_name} from {-rs::LoadedShop::*}
					send "{@system_prefix} &a成功刪除商店 %{_name}%"
					close player's inventory
				else if click action is right mouse button:
					set {-rs::input::%player%} to "setname"
					set {-rs::inputdata::%player%} to {_name}
					set {_msg} to rs_jsonraw("{@system_prefix} &e請使用指令輸入 /rsinput <商店名稱>","&7點擊運行/rsinput <商店名稱>","/rsinput ")
					execute console command "tellraw %player% %{_msg}%"
					close player's inventory
			else if event-slot is arrow:
				set {_l} to uncolored line 1 of lore of event-slot
				rs_editor_gui(player,{_l} parsed as number)
			else if event-slot is air:
				close player's inventory
				set {-rs::input::%player%} to "create"
				set {_msg} to rs_jsonraw("{@system_prefix} &e請使用指令輸入 /rsinput <商店代號>","&7點擊運行/rsinput <商店代號>","/rsinput ")
				execute console command "tellraw %player% %{_msg}%"

	else if name of event-inventory contains "&1RPGSHOP_Editing":
		if type of event-inventory is chest inventory: 
			cancel event
			if event-slot is air:
				set {_cousor} to event.getCursor()
				if {_cousor} isn't air:
					set {_slot} to index of event-slot
					set yaml value "items.%{_slot}%.reward" from {-rs::editing::%player%} to {_cousor}
					set yaml value "items.%{_slot}%.price.money" from {-rs::editing::%player%} to 0
					set yaml value "items.%{_slot}%.price.points" from {-rs::editing::%player%} to 0
					set yaml value "items.%{_slot}%.price.level" from {-rs::editing::%player%} to 0
					send "{@system_prefix} &a成功新增物品 %{_cousor}%"
					save yaml {-rs::editing::%player%} 
					event.setCursor(air)
					wait a tick
					rs_edit_shop(player,{-rs::editing::%player%})
			else:
				if click action is left mouse button:
					rs_edit_item(player,index of event-slot)
				else if click action is middle mouse button:
					set {_it} to yaml value "items.%index of event-slot%.reward" from {-rs::editing::%player%}
					give {_it} to player
				else if click action is right mouse button:
					delete yaml nodes with key "items.%index of event-slot%" from {-rs::editing::%player%}
					save yaml {-rs::editing::%player%} 
					close player's inventory
					rs_edit_shop(player,{-rs::editing::%player%})

	else if name of event-inventory contains "&1RPGSHOP_price":
		if type of event-inventory is chest inventory:
			set {_slot} to uncolored name of event-inventory
			replace all "RPGSHOP_price: " with "" in {_slot}
			if index of event-slot < 9:
				if "%lore of event-slot%" contains "&c---點擊右鍵刪除此物品---":
					cancel event
					if click action is middle mouse button:
						set {_temp::*} to yaml list "items.%{_slot}%.price.itemlist" from {-rs::editing::%player%}
						set {_index} to index of event-slot + 1
						give {_temp::%{_index}%} to player
					else if click action is right mouse button:
						
						yaml_list_remove( "items.%{_slot}%.price.itemlist", {-rs::editing::%player%}, index of event-slot + 1 )
						close player's inventory
						wait 2 tick
						rs_edit_item(player,{_slot})
			else:

				cancel event
				set {_v::*} to "level" and "money" 
				if {PlayerPoints_class} is set:
					add "points" to {_v::*}
				loop {_v::*}:
					add 1 to {_slottemp} 
					if index of event-slot is 12+{_slottemp}:
						if click action is left mouse button:
							set {-rs::input::%player%} to loop-value 
							set {-rs::inputdata::%player%} to {_slot}
							close player's inventory
							set {_raw} to rs_jsonraw("{@system_prefix} &e請使用指令輸入 /rsinput <%loop-value%>","&7點擊運行/rsinput <%loop-value%>","/rsinput ")
							execute console command "tellraw %player% %{_raw}%"
						else if click action is right mouse button:
							set yaml value "items.%{_slot}%.price.%loop-value%" from {-rs::editing::%player%} to 0
							save yaml {-rs::editing::%player%} 
							rs_edit_item(player,{_slot})
						stop trigger

				if index of event-slot is 12:
					if click action is left mouse button:
						rs_edit_cmd(player,{_slot})
					if click action is right mouse button:
						set {_value} to yaml value "items.%{_slot}%.keepreward" from {-rs::editing::%player%}
						if {_value} = false:
							set yaml value "items.%{_slot}%.keepreward" from {-rs::editing::%player%} to true
						else:
							set yaml value "items.%{_slot}%.keepreward" from {-rs::editing::%player%} to false
						save yaml {-rs::editing::%player%} 
						rs_edit_item(player,{_slot})

				else if index of event-slot is 16:
					if click action is left mouse button:
						if yaml path "items.%{_slot}%.price.itemlist" in {-rs::editing::%player%} has value:
							set {_listtemp::*} to yaml list "items.%{_slot}%.price.itemlist" from {-rs::editing::%player%}
							set {_sizetemp} to size of {_listtemp::*}
							loop 9 - {_sizetemp} times:
								set {_number} to {_sizetemp} + (loop-value) -1
								set {_item} to slot {_number} of event-inventory
								if {_item} isn't air:
									add {_item} to {_listtemp::*}
						else:
							loop 9 times:
								set {_item} to slot (loop-value)-1 of event-inventory
								if {_item} isn't air:
									add {_item} to {_listtemp::*}
						set yaml list "items.%{_slot}%.price.itemlist" from {-rs::editing::%player%} to {_listtemp::*}

					else if click action is right mouse button with shift:
						delete yaml list "items.%{_slot}%.price.itemlist" from {-rs::editing::%player%}
						
					save yaml {-rs::editing::%player%} 
					close player's inventory
					wait 2 tick
					rs_edit_item(player,{_slot})
				else if index of event-slot is 17:
					close player's inventory
					rs_edit_shop(player,{-rs::editing::%player%})


	else if name of event-inventory contains "command editor slot:":
		cancel event
		set {_slot} to StringGetNumber( uncolored name of event-inventory )
		if index of event-slot != 8:
			
			if event-slot is air:
				set {-rs::input::%player%} to "addcmd"
				set {-rs::inputdata::%player%} to StringGetNumber( uncolored name of event-inventory )
				close player's inventory
				set {_raw} to rs_jsonraw("{@system_prefix} &e請使用指令輸入 /rsinput <指令> (使用佔位符[p]代表玩家)","&7點擊運行/rsinput <指令>","/rsinput ")
				execute console command "tellraw %player% %{_raw}%"
			else:
				if click action is right mouse button:
					yaml_list_remove( "items.%{_slot}%.rewardcmd", {-rs::editing::%player%}, index of event-slot + 1 )
					close player's inventory
					wait 2 tick
					rs_edit_cmd( player, {_slot} )
		else:
			rs_edit_item( player, {_slot} )



command rpgshopadmin [<text>] [<text>] [<text>]:
	aliases: rsa
	permission: rs.admin
	trigger:
		if arg-1 isn't set:
			send "&7---------- {@system_prefix} &7----------"
			send "&a/rsa editor - &f打開商店編輯器"
			send "&a/rsa list [page] - &f查看商店列表"
			send "&a/rsa edit [代號] - &f編輯該商店"
			send "&a/rsa create [代號] - &f創建新商店"
			send "&a/rsa setname [代號] [名稱] - &f設定商店名稱"
			send "&a/rsa reload - &f重新讀取"
		else if arg-1 = "editor":
			rs_editor_gui(player,1)
		else if arg-1 = "reload":
			execute player command "sk reload %name of script%"
		else if arg-1 = "create":
			if arg-1 is set:
				set {_allshop::*} to {-rs::LoadedShop::*}
				if {_allshop::*} doesn't contain "%arg-2%.yaml":
					load yaml "{@path}/%arg-2%.yaml" as "%arg-2%.yaml"
					set skript-yaml value "ShopName" from "%arg-2%.yaml" to arg-2
					send "{@system_prefix} &a成功創建商店 %arg-2%"
					save yaml "%arg-2%.yaml"
					add "%arg-2%.yaml" to {-rs::LoadedShop::*}
				else:
					send "{@system_prefix} &c該商店已存在" 
			else:
				send "{@system_prefix} &c請輸入代號"
		else if arg-1 = "setname":
			if arg-3 is set:
				set {_allshop::*} to {-rs::LoadedShop::*}
				if {_allshop::*} contains "%arg-2%.yaml":
					set {_n} to arg-3
					replace all "&" with "§" in {_n}
					set skript-yaml value "ShopName" from "%arg-2%.yaml" to {_n}
					send "{@system_prefix} &a成功設定商店名稱為 %{_n}%"
					save yaml "%arg-2%.yaml"
				else:
					send "{@system_prefix} &c該商店不存在" 
			else:
				send "{@system_prefix} &c請勿留空"
		else if arg-1 = "list":
			set {_page} to arg-2 parsed as number
			if {_page} isn't set:
				set {_page} to 1
			set {_l::*} to {-rs::LoadedShop::*}
			send "&7---------- ShopList &f[page %{_page}%&f] &7----------"
			set {_start} to ({_page}-1) * 20
			loop 20 times:
				add 1 to {_start} 
				if {_l::%{_start}%} is set:
					set {_shopcode} to {_l::%{_start}%}
					set {_name} to skript-yaml value "ShopName" from {_shopcode}
					set {_raw} to rs_jsonraw("&f >  %{_shopcode}% : %{_name}%","&7點擊編輯此商店","/rsa edit %{_shopcode}%")
					execute console command "tellraw %player% %{_raw}%"
				clear {_name} 
			send "&7---------- ShopList &f[page %{_page}%&f] &7----------"
		else if arg-1 = "edit":
			if arg-2 doesn't contain "yaml":
				set {_arg} to "%arg-2%.yaml"
			else:
				set {_arg} to arg-2
			set {_page} to arg-2 parsed as number
			if {_page} isn't set:
				set {_page} to 1
			set {_l::*} to {-rs::LoadedShop::*}
			if {_l::*} contains {_arg}:
				rs_edit_shop(player,{_arg})
			else:
				send "{@system_prefix} &c商店不存在"

command rsinput [<text>]:
	permission: rs.admin
	trigger:
		if {-rs::input::%player%} is set:
			if {-rs::input::%player%} contains "create":
				load yaml "{@path}/%arg-1%.yaml" as "%arg-1%.yaml"
				set skript-yaml value "ShopName" from "%arg-1%.yaml" to arg-1
				send "{@system_prefix} &a成功創建商店 %arg-1%"
				save yaml "%arg-1%.yaml"
				wait 2 tick
				rs_editor_gui(player,1)
			else if {-rs::input::%player%} contains "setname":
				set {_n} to arg-1
				replace all "&" with "§" in {_n}
				set skript-yaml value "ShopName" from {-rs::inputdata::%player%} to {_n}
				send "{@system_prefix} &a成功設定商店名稱為 %{_n}%"
				save yaml {-rs::inputdata::%player%}
				wait 2 tick
				rs_editor_gui(player,1)

			else if {-rs::input::%player%} contains "addcmd":
				yaml_list_add( "items.%{-rs::inputdata::%player%}%.rewardcmd", {-rs::editing::%player%} , arg-1 )
				if yaml path "items.%{-rs::inputdata::%player%}%.keepreward" in {-rs::editing::%player%} doesn't have value:
					set yaml value "items.%{-rs::inputdata::%player%}%.keepreward" from {-rs::editing::%player%} to false
				send "{@system_prefix} &a成功添加指令 %arg-1%"
				save yaml {-rs::editing::%player%}
				wait 2 tick
				rs_edit_cmd(player,{-rs::inputdata::%player%})
		
			else:
				set {_v::*} to "level" , "money" and "points"
				loop {_v::*}:
					if {-rs::input::%player%} = loop-value:
						set {_n} to arg-1 parsed as number
						if {_n} is set:
							set skript-yaml value "items.%{-rs::inputdata::%player%}%.price.%loop-value%" from {-rs::editing::%player%} to {_n}
							save yaml {-rs::editing::%player%}
							send "{@system_prefix} &a成功修改 %loop-value% 值為 %{_n}%"
							rs_edit_item(player,{-rs::inputdata::%player%})
							exit loop
						else:
							send "{@system_prefix} &c請輸入數字"
							stop trigger
				
			delete {-rs::input::%player%} and {-rs::inputdata::%player%} 

		else:
			send "{@system_prefix} &c你沒有待輸入的動作"

# TabComplete
import:
	org.bukkit.event.server.TabCompleteEvent
	java.util.Arrays
on TabCompleteEvent:
	if event.getBuffer() = "/rsa ":
		set {_out::*} to "editor" , "list" , "create" , "edit" , "setname" and "reload" 
		set {_arr} to Arrays.asList([{_out::*}])
		event.setCompletions({_arr})
	if event.getBuffer() = "/rsa edit " or "/rsa setname ":
		set {_shop::*} to {-rs::LoadedShop::*}
		replace all ".yaml" with "" in {_shop::*}
		set {_arr} to Arrays.asList([{_shop::*}])
		event.setCompletions({_arr})